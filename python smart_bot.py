import ccxt
import time
import requests
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
api_key = 'Lrr2C75Qn4iJcfvrFN'
api_secret = 'OYvTwpjiyjcyS1LWL03DQE7f47b1JHnQUnCy'
symbol = 'BTC/USDT:USDT'
amount = 0.001
tp_dollars = 5
timeout_sec = 20 * 60
MAX_REENTRIES = 3

# === TELEGRAM ===
TELEGRAM_TOKEN = '7912609829:AAGu3jGG8Ku4RfIOXUL8aVgjqLBlqOki4_0'
CHAT_ID = '1203769403'

def send_telegram(msg):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": CHAT_ID, "text": msg}
    try:
        requests.post(url, data=data)
    except:
        print("‚ùå –û—à–∏–±–∫–∞ Telegram")

# === –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö BYBIT ===
exchange = ccxt.bybit({
    'apiKey': api_key,
    'secret': api_secret,
    'enableRateLimit': True,
    'options': {'defaultType': 'future'}
})

def get_price():
    return exchange.fetch_ticker(symbol)['last']

def log(msg):
    print(f"[{datetime.now().strftime('%H:%M:%S')}] {msg}")
    send_telegram(msg)

def open_position(side):
    if side == 'long':
        return exchange.create_market_buy_order(symbol, amount)
    else:
        return exchange.create_market_sell_order(symbol, amount)

def close_position(side):
    if side == 'long':
        return exchange.create_market_sell_order(symbol, amount)
    else:
        return exchange.create_market_buy_order(symbol, amount)

def run_strategy():
    log("üöÄ –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –õ–û–ù–ì –∏ –®–û–†–¢")
    price_entry = get_price()

    # –ü–µ—Ä–≤—ã–µ —Å–¥–µ–ª–∫–∏
    open_position('long')
    open_position('short')

    entry_time = time.time()
    long_closed = False
    short_closed = False
    reentries = 0
    trend_direction = None

    while not (long_closed and short_closed):
        price_now = get_price()
        elapsed = time.time() - entry_time

        long_tp = price_entry + (tp_dollars / amount)
        short_tp = price_entry - (tp_dollars / amount)

        # === –ó–∞–∫—Ä—ã—Ç–∏–µ –õ–û–ù–ì ===
        if not long_closed and price_now >= long_tp:
            close_position('long')
            log(f"üí∞ –õ–û–ù–ì –∑–∞–∫—Ä—ã–ª—Å—è –≤ +{tp_dollars}$")
            long_closed = True
            trend_direction = 'long'
            last_price = price_now

        # === –ó–∞–∫—Ä—ã—Ç–∏–µ –®–û–†–¢ ===
        if not short_closed and price_now <= short_tp:
            close_position('short')
            log(f"üí∞ –®–û–†–¢ –∑–∞–∫—Ä—ã–ª—Å—è –≤ +{tp_dollars}$")
            short_closed = True
            trend_direction = 'short'
            last_price = price_now

        # === –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ —Ç—Ä–µ–Ω–¥—É ===
        if trend_direction and reentries < MAX_REENTRIES:
            if trend_direction == 'long' and price_now >= last_price + (tp_dollars / amount):
                open_position('long')
                log(f"üîÑ –ù–æ–≤—ã–π –õ–û–ù–ì –æ—Ç–∫—Ä—ã—Ç –ø–æ —Ç—Ä–µ–Ω–¥—É ‚Üë (—Ä–µ–µ–Ω—Ç—Ä–∏ #{reentries + 1})")
                last_price = price_now
                reentries += 1

            elif trend_direction == 'short' and price_now <= last_price - (tp_dollars / amount):
                open_position('short')
                log(f"üîÑ –ù–æ–≤—ã–π –®–û–†–¢ –æ—Ç–∫—Ä—ã—Ç –ø–æ —Ç—Ä–µ–Ω–¥—É ‚Üì (—Ä–µ–µ–Ω—Ç—Ä–∏ #{reentries + 1})")
                last_price = price_now
                reentries += 1

        # === –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ —Ç–∞–π–º–µ—Ä—É ===
        if elapsed > timeout_sec:
            log("‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ. –ó–∞–∫—Ä—ã–≤–∞—é –≤—Å—ë.")
            if not long_closed:
                close_position('long')
            if not short_closed:
                close_position('short')
            break

        time.sleep(3)

    log("‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω\n")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /start ===
def start(update: Update, context: CallbackContext) -> None:
    reply_keyboard = [['–ù–∞—á–∞—Ç—å', '–û—Ç–º–µ–Ω–∞']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    update.message.reply_text(
        "–ù–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é?",
        reply_markup=markup
    )

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–í–ï–¢–û–í –ù–ê –ö–ù–û–ü–ö–ò ===
def handle_response(update: Update, context: CallbackContext) -> None:
    user_response = update.message.text
    if user_response == '–ù–∞—á–∞—Ç—å':
        update.message.reply_text("–¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞—á–∞–ª–∞—Å—å!")
        run_strategy()
    elif user_response == '–û—Ç–º–µ–Ω–∞':
        update.message.reply_text("–¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# === –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê ===
def main():
    updater = Updater(TELEGRAM_TOKEN)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_response))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()